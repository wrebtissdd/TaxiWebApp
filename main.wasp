app SharECar {
  wasp: {
    version: "^0.13.0"
  },
  title: "SharECar",
  client: {
    rootComponent: import { Layout } from "@src/Layout.jsx"
  },
  db: {
    prisma: {
      clientPreviewFeatures: ["extendedWhereUnique"]
    }
  },
  auth: {
    userEntity: User,
    methods: {
      usernameAndPassword: {}
    },
    onAuthFailedRedirectTo: "/login",
    onAuthSucceededRedirectTo: "/"
  }
}

route LoginRoute { path: "/login", to: LoginPage }
page LoginPage {
  component: import Login from "@src/pages/auth/Login.jsx"
}
route SignupRoute { path: "/signup", to: SignupPage }
page SignupPage {
  component: import Signup from "@src/pages/auth/Signup.jsx"
}

entity User {=psl
    id               Int    @id @default(autoincrement())
    email            String @unique
    password         String
    name             String
    profilePicture   String
    paymentMethod    String
    rideHistory      Ride
    preferredCarType String
psl=}

entity Driver {=psl
    id              Int     @id @default(autoincrement())
    userId          Int     @unique
    license         String
    registration    String
    backgroundCheck Boolean
    preferredRoute  String
    musicPreference String
psl=}

entity Ride {=psl
    id                 Int      @id @default(autoincrement())
    driverId           Int
    destination        String
    pickUpTime         DateTime
    numberOfPassengers Int
    carType            String
    fare               Float
    paymentStatus      Boolean
    userId             Int
    rating             Int
    review             String
    promoCode          String
    User               User      @relation(fields: [userId], references: [id])
psl=}

entity Review {=psl
    id       Int    @id @default(autoincrement())
    rating   Int
    comment  String
    userId   Int
    driverId Int
psl=}

entity Promotion {=psl
    id          Int      @id @default(autoincrement())
    code        String
    expiryDate  DateTime
    description String
    isActive    Boolean
    userId      Int
psl=}

action createUser {
  fn: import { createUser } from "@src/actions.js",
  entities: [User]
}

action updateUser {
  fn: import { updateUser } from "@src/actions.js",
  entities: [User]
}

action createDriver {
  fn: import { createDriver } from "@src/actions.js",
  entities: [Driver]
}

action updateDriver {
  fn: import { updateDriver } from "@src/actions.js",
  entities: [Driver]
}

action createRide {
  fn: import { createRide } from "@src/actions.js",
  entities: [Ride]
}

action updateRide {
  fn: import { updateRide } from "@src/actions.js",
  entities: [Ride]
}

action createReview {
  fn: import { createReview } from "@src/actions.js",
  entities: [Review]
}

action createPromotion {
  fn: import { createPromotion } from "@src/actions.js",
  entities: [Promotion]
}

query getUser {
  fn: import { getUser } from "@src/queries.js",
  entities: [User]
}

query getDriver {
  fn: import { getDriver } from "@src/queries.js",
  entities: [Driver]
}

query getRide {
  fn: import { getRide } from "@src/queries.js",
  entities: [Ride]
}

query getReview {
  fn: import { getReview } from "@src/queries.js",
  entities: [Review]
}

query getPromotion {
  fn: import { getPromotion } from "@src/queries.js",
  entities: [Promotion]
}

route HomeRoute { path: "/", to: HomePage }
page HomePage {
  component: import HomePage from "@src/pages/Home.jsx",
  authRequired: false
}

route RideRoute { path: "/ride/:rideId", to: RidePage }
page RidePage {
  component: import RidePage from "@src/pages/Ride.jsx",
  authRequired: false
}

route ProfileRoute { path: "/profile/:userId", to: ProfilePage }
page ProfilePage {
  component: import ProfilePage from "@src/pages/Profile.jsx",
  authRequired: true
}

route DriverRoute { path: "/driver/:driverId", to: DriverPage }
page DriverPage {
  component: import DriverPage from "@src/pages/Driver.jsx",
  authRequired: true
}